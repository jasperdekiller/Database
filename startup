-- This program was made by Jasperdekiller.
-- Dont edit or steal any code. Dont own the Credits.

os.pullEvent = os.pullEventRaw

-- Check for advanced Computer --

if not term.isColor or not term.isColor() then
        error("Jasper's Database Requires an Advanced Computer.")
end


-- HashCode --

local MOD = 2^32
local MODM = MOD-1
 
local function memoize(f)
        local mt = {}
        local t = setmetatable({}, mt)
        function mt:__index(k)
                local v = f(k)
                t[k] = v
                return v
        end
        return t
end
 
local function make_bitop_uncached(t, m)
        local function bitop(a, b)
                local res,p = 0,1
                while a ~= 0 and b ~= 0 do
                        local am, bm = a % m, b % m
                        res = res + t[am][bm] * p
                        a = (a - am) / m
                        b = (b - bm) / m
                        p = p*m
                end
                res = res + (a + b) * p
                return res
        end
        return bitop
end
 
local function make_bitop(t)
        local op1 = make_bitop_uncached(t,2^1)
        local op2 = memoize(function(a) return memoize(function(b) return op1(a, b) end) end)
        return make_bitop_uncached(op2, 2 ^ (t.n or 1))
end
 
local bxor1 = make_bitop({[0] = {[0] = 0,[1] = 1}, [1] = {[0] = 1, [1] = 0}, n = 4})
 
local function bxor(a, b, c, ...)
        local z = nil
        if b then
                a = a % MOD
                b = b % MOD
                z = bxor1(a, b)
                if c then z = bxor(z, c, ...) end
                return z
        elseif a then return a % MOD
        else return 0 end
end
 
local function band(a, b, c, ...)
        local z
        if b then
                a = a % MOD
                b = b % MOD
                z = ((a + b) - bxor1(a,b)) / 2
                if c then z = bit32_band(z, c, ...) end
                return z
        elseif a then return a % MOD
        else return MODM end
end
 
local function bnot(x) return (-1 - x) % MOD end
 
local function rshift1(a, disp)
        if disp < 0 then return lshift(a,-disp) end
        return math.floor(a % 2 ^ 32 / 2 ^ disp)
end
 
local function rshift(x, disp)
        if disp > 31 or disp < -31 then return 0 end
        return rshift1(x % MOD, disp)
end
 
local function lshift(a, disp)
        if disp < 0 then return rshift(a,-disp) end
        return (a * 2 ^ disp) % 2 ^ 32
end
 
local function rrotate(x, disp)
    x = x % MOD
    disp = disp % 32
    local low = band(x, 2 ^ disp - 1)
    return rshift(x, disp) + lshift(low, 32 - disp)
end
 
local k = {
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
        0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
        0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
        0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
        0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
        0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
        0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
}
 
local function str2hexa(s)
        return (string.gsub(s, ".", function(c) return string.format("%02x", string.byte(c)) end))
end
 
local function num2s(l, n)
        local s = ""
        for i = 1, n do
                local rem = l % 256
                s = string.char(rem) .. s
                l = (l - rem) / 256
        end
        return s
end
 
local function s232num(s, i)
        local n = 0
        for i = i, i + 3 do n = n*256 + string.byte(s, i) end
        return n
end
 
local function preproc(msg, len)
        local extra = 64 - ((len + 9) % 64)
        len = num2s(8 * len, 8)
        msg = msg .. "\128" .. string.rep("\0", extra) .. len
        assert(#msg % 64 == 0)
        return msg
end
 
local function initH256(H)
        H[1] = 0x6a09e667
        H[2] = 0xbb67ae85
        H[3] = 0x3c6ef372
        H[4] = 0xa54ff53a
        H[5] = 0x510e527f
        H[6] = 0x9b05688c
        H[7] = 0x1f83d9ab
        H[8] = 0x5be0cd19
        return H
end
 
local function digestblock(msg, i, H)
        local w = {}
        for j = 1, 16 do w[j] = s232num(msg, i + (j - 1)*4) end
        for j = 17, 64 do
                local v = w[j - 15]
                local s0 = bxor(rrotate(v, 7), rrotate(v, 18), rshift(v, 3))
                v = w[j - 2]
                w[j] = w[j - 16] + s0 + w[j - 7] + bxor(rrotate(v, 17), rrotate(v, 19), rshift(v, 10))
        end
 
        local a, b, c, d, e, f, g, h = H[1], H[2], H[3], H[4], H[5], H[6], H[7], H[8]
        for i = 1, 64 do
                local s0 = bxor(rrotate(a, 2), rrotate(a, 13), rrotate(a, 22))
                local maj = bxor(band(a, b), band(a, c), band(b, c))
                local t2 = s0 + maj
                local s1 = bxor(rrotate(e, 6), rrotate(e, 11), rrotate(e, 25))
                local ch = bxor (band(e, f), band(bnot(e), g))
                local t1 = h + s1 + ch + k[i] + w[i]
                h, g, f, e, d, c, b, a = g, f, e, d + t1, c, b, a, t1 + t2
        end
 
        H[1] = band(H[1] + a)
        H[2] = band(H[2] + b)
        H[3] = band(H[3] + c)
        H[4] = band(H[4] + d)
        H[5] = band(H[5] + e)
        H[6] = band(H[6] + f)
        H[7] = band(H[7] + g)
        H[8] = band(H[8] + h)
end
 
local function sha256(msg)
        msg = preproc(msg, #msg)
        local H = initH256({})
        for i = 1, #msg, 64 do digestblock(msg, i, H) end
        return str2hexa(num2s(H[1], 4) .. num2s(H[2], 4) .. num2s(H[3], 4) .. num2s(H[4], 4) ..
                num2s(H[5], 4) .. num2s(H[6], 4) .. num2s(H[7], 4) .. num2s(H[8], 4))
end

-- Variables --

local Running_Status = "Not Running"
local serverName = nil
local Log_Running_Status = "Not Running"
local current_acc_number = 0
local offline = 0
local currentVersion = 0.8
local updater = true
local currentOffset = 1
local selectedRow = nil
local selectedAccount = nil
local status = nil
local bannedUsers = {}
local Banned = {}
local banTime = 5
local maxLoginTriesLimit = 5
local keyAmount = 0
local startTime = 0
local Console = true
local keyAm = 0
local lockTime = 5
local first_start = "yes"
local Lock = false
local Modem = false
local displayUsers = {}
local serverStarted = false
local userN = nil
local userP = nil
local crUser = false
local searchBox = {}
local latestLogMessage = nil
local currentUsers = Users
local searchPos = 33
local enterPressed = false
local userName = nil
local userPass = nil
local currentView = "accounts"
local logCurrentOffset = 1
local search = false
local commandSearch = false
local serverPass = nil
local userDetails = {}

-- Center Print
local function centerPrint(Txt, Y)
  local Width, Height = term.getSize()
  local CurX, CurY = term.getCursorPos()
  local X = math.floor((Width/2)-(string.len(Txt)/2))
  local Y = Y or CurY + 1
  term.setCursorPos(X,Y)
  term.write(Txt)
end



-- Tables --

local messageLevel = {
    Info    = 'Info',
    Success = 'Success',
    Warning = 'Warning',
    Error   = 'Error',
    Alert   = 'Alert',
}

local Users = {}

local log = {}

local allLogs = {}
--


local logview = {}

function logview.userPress()
 while true do
  local evt, s = os.pullEvent("key") -- wait for a key press
  s = tonumber(s)
  if evt == "key" and commandSearch == false then
   if s == 30 then
		   term.setBackgroundColor(colors.white)
		   term.setTextColor(colors.gray)
		   term.setCursorPos(28,2)
		   term.write(" Log ")
		   term.setCursorPos(34,2)
		   term.setBackgroundColor(colors.blue)
		   term.setTextColor(colors.white)
		   write(" Accounts ")	  
		   sleep(0.1)
      if offline == 1 then
       currentView = "offline"
      else
	  	 currentView = "accounts"
      end
	  break
   elseif s == 78 then
    if offline == 0 then
     stopServer()
    end
   elseif s == 16 then
    currentView = "exit"
      break
   elseif s == 56 then
   	 currentView = "lock"
   	return
   end 	
  end
 end
end

function logview.printHeader()
 term.setCursorPos(1,1)
  term.setBackgroundColor(colors.gray)
  term.clearLine()
  term.setCursorPos(1,2)
  term.clearLine()
  term.setCursorPos(1,3)
  term.clearLine()
  term.setCursorPos(2,2)
  term.setBackgroundColor(colors.white)
  term.setTextColor(colors.gray)
 if offline == 0 then
  term.write(" x ")
 elseif offline == 1 then
  term.write(" > ")
 end
  term.setCursorPos(6,2)
  term.setBackgroundColor(colors.gray)
  term.setTextColor(colors.white)
  term.write(Log_Running_Status)
        
 -- Buttons --
       
  term.setBackgroundColor(colors.cyan)
  term.setTextColor(colors.white)
  term.setCursorPos(18,2)
  term.write(" Options ")
  term.setBackgroundColor(colors.blue)
  term.setTextColor(colors.white)
  term.setCursorPos(28,2)
  term.write(" Log ")
  term.setCursorPos(34,2)
  term.setBackgroundColor(colors.white)
  term.setTextColor(colors.gray)
  write(" Accounts ")
  term.setTextColor(colors.gray)
  term.setBackgroundColor(colors.white)
  term.setCursorPos(45,2)
  write(" Quit ")  

end





function logview.printLogs(offset)
lineNumber = 3

-- Print the layout --

  
  term.setCursorPos(34,2)
  term.setTextColor(colors.gray)
  term.setBackgroundColor(colors.white)
  term.write(" Accounts ")
  term.setBackgroundColor(colors.white)
  term.clear()
logview.printHeader()
if #log > 0 then
for i = offset, offset + 16 do
 if i > #log then break end
   
  if log[i][2] == "Info" then

   term.setCursorPos(1,lineNumber+1)
   term.setTextColor(colors.blue)
   write("["..log[i][2].."] ")
   term.setTextColor(colors.lightGray)
   x, y = term.getCursorPos()
   term.setCursorPos(x,y)
   write(log[i][1])

   xP, lineNumber = term.getCursorPos()

  elseif log[i][2] == "Success" then

   term.setCursorPos(1,lineNumber+1)
   term.setTextColor(colors.green)
   write("["..log[i][2].."] ")
   term.setTextColor(colors.lightGray)
   x, y = term.getCursorPos()
   term.setCursorPos(x,y)
   write(log[i][1])

   xP, lineNumber = term.getCursorPos()

  elseif log[i][2] == "Warning" then

   term.setCursorPos(1,lineNumber+1)
   term.setTextColor(colors.red)
   write("["..log[i][2].."] ")
   term.setTextColor(colors.lightGray)
   x, y = term.getCursorPos()
   term.setCursorPos(x,y)
   write(log[i][1])

   xP, lineNumber = term.getCursorPos()

  elseif log[i][2] == "Error" then    	

   term.setCursorPos(1,lineNumber+1)
   term.setTextColor(colors.red)
   write("["..log[i][2].."] ")
   term.setTextColor(colors.lightGray)
   x, y = term.getCursorPos()
   term.setCursorPos(x,y)
   write(log[i][1])

   xP, lineNumber = term.getCursorPos()

  elseif log[i][2] == "Alert" then      

   term.setCursorPos(1,lineNumber+1)
   term.setTextColor(colors.red)
   write("["..log[i][2].."] ")
   term.setTextColor(colors.lightGray)
   x, y = term.getCursorPos()
   term.setCursorPos(x,y)
   write(log[i][1])

   xP, lineNumber = term.getCursorPos()

   end
    logview.printHeader()
  end
  
 end
end


local server = true

function UsernameToID(username)
 for k,v in pairs(Banned) do
  if v["username"] == username then
   return v["currentBanNumber"]
  end
 end
 return false
end

function logview.userClicks()
 while true do
	local event, button, xPos, yPos = os.pullEvent()

	if event == "mouse_click" then
    startTime = 0
	 if xPos >= 34 and xPos <= 44 and yPos == 2 then
		   term.setBackgroundColor(colors.white)
		   term.setTextColor(colors.gray)
		   term.setCursorPos(28,2)
		   term.write(" Log ")
		   term.setCursorPos(34,2)
		   term.setBackgroundColor(colors.blue)
		   term.setTextColor(colors.white)
		   write(" Accounts ")	  
		   sleep(0.1)
      if offline == 1 then
        currentView = "offline"
        printUsers(currentOffset)       
      else
        currentView = "accounts"
        printUsers(currentOffset)       
      end
	  	break
	  elseif xPos >= 18 and xPos <= 26 and yPos == 2 then
	  	term.setBackgroundColor(colors.white)
      term.setTextColor(colors.cyan)
    	term.setCursorPos(18,2)
    	term.write(" Options ")
    	sleep(0.1)
		  term.setBackgroundColor(colors.cyan)
    	term.setTextColor(colors.white)
    	term.setCursorPos(18,3)
    	term.write(" Clear   ")
      term.setCursorPos(18,4)
      term.write(" Command ")
      term.setCursorPos(18,5)
      term.write(" Update  ")
      event, btn, x, y = os.pullEvent("mouse_click")
      if event == "mouse_click" then
       if x >= 18 and x <= 26 and y == 3 then
      	log = {}
        allLogs[#allLogs+1] = {"Cleared console."}
      	log[#log+1]	= {"Cleared console.","Success"}
        logCurrentOffset = 1
      	logview.printLogs(logCurrentOffset)
       elseif x >= 18 and x <= 26 and y == 5 then
        local download = http.get("https://raw.githubusercontent.com/jasperdekiller/Database/master/Version") 
         local handle = download.readAll() 
         download.close() 

         f = fs.open("version","r")
         oldVersion = f.readLine()
         f.close()

         if oldVersion == handle then
         else
          file = fs.open("version","w")
          file.write(handle)
          f.close()
          local downloadU = http.get("https://raw.githubusercontent.com/jasperdekiller/Database/master/startup")
          local handleU = downloadU.readAll()
          downloadU.close()
          file = fs.open("startup","w")
          file.write(handleU)
          file.close()
         end
         logMsg("Server updated.",messageLevel.Success)     
       elseif x >= 18 and x <= 26 and y == 4 then
       function commandView()
          commandSearch = true
          printMsg("Command shell.")
          term.setCursorPos(10,8)
          term.setBackgroundColor(colors.lightGray)
          write("Command: ")
          term.setBackgroundColor(colors.white)
          term.setCursorPos(10,9)
          write("                     ")
          term.setCursorPos(10,9)
          term.setTextColor(colors.gray)
          command = read()
        if command == "unban" then
          printMsg("Command shell.")
          term.setCursorPos(10,8)
          term.setBackgroundColor(colors.lightGray)
          write("Player: ")
          term.setBackgroundColor(colors.white)
          term.setCursorPos(10,9)
          write("                     ")
          term.setCursorPos(10,9)
          term.setTextColor(colors.gray)
          player = read()          
          commandSearch = false
          if checkBanned(player) then
            user_ID = UsernameToID(player)             
           if user_ID ~= nil then      
            unbanUser(user_ID)
            logMsg("Console: Unbanned user '"..player.."'.",messageLevel.Success)
            return
           else
            logMsg("Console: Something went wrong by converting the player name to ID. Restarting the Database would help sometimes.")
            return
           end
          else
           logMsg("Console: User '"..player.."' has never been banned.")
           return
          end
           logview.printLogs(logCurrentOffset)
           return
        elseif command == "id" then          
          commandSearch = false
          logMsg("Console: Server ID = "..os.getComputerID())
          return
        elseif command == "ban" then
          printMsg("Command shell.")
          term.setCursorPos(10,8)
          term.setBackgroundColor(colors.lightGray)
          write("Player: ")
          term.setBackgroundColor(colors.white)
          term.setCursorPos(10,9)
          write("                     ")
          term.setCursorPos(10,9)
          term.setTextColor(colors.gray)
          player = read()          
          commandSearch = false
          if checkBanned(player) then          
           logMsg("Console: User '"..player.."' has already been banned.")
           return            
          else
            newBanned = #Banned+1
            Banned[newBanned] = {["username"] = player, ["userID"] = UsernameToAccountNumber(player), ["currentBanNumber"] = newBanned}       
            logMsg("Banned Computer-ID & User.", messageLevel.Success)
           return              
          end
        else
         commandSearch = false
         logMsg("Console: No such command",messageLevel.Warning)
        end
       end
       commandView()
       else
        logview.printLogs(logCurrentOffset)
       end
      end
	  elseif xPos >= 45 and xPos <= 51 and yPos == 2 then
         currentView = "exit"
        break
      elseif xPos >= 2 and xPos <= 4 and yPos == 2 then
       term.setCursorPos(2,2)
	     term.setBackgroundColor(colors.blue)
	     term.setTextColor(colors.white)
      if offline == 0 then
       term.write(" x ")
      elseif offline == 1 then
       term.write(" > ")
      end    
	     sleep(0.2)
	     term.setCursorPos(2,2)
	     term.setBackgroundColor(colors.white)
	     term.setTextColor(colors.gray)
	    if offline == 0 then
       term.write(" x ")
      elseif offline == 1 then
       term.write(" > ")
      end
	  if offline == 0 then
	   file = fs.open("Stopped","w")
	   file.close()
       server = false
	   stopServer("UserStopped")
	  elseif offline == 1 then
	   offline = 0
       server = true
	   startServer()
	  end
	 end
   end
 end
end

function logview.userScrolls()
    while true do	
        event, amount = os.pullEvent()
        if event == "mouse_scroll" then
          logstartTime = 0
            local loglastOffset = logCurrentOffset
            if logCurrentOffset + amount <= 1 then
                logCurrentOffset = 1
            elseif (amount + logCurrentOffset + 15 >= #log) then
                logCurrentOffset = #log - 15
                if logCurrentOffset <= 1 then
                  logCurrentOffset = 1
                end
            else
                logCurrentOffset = logCurrentOffset + amount
            end
            if logCurrentOffset ~= loglastOffset then
                logview.printLogs(logCurrentOffset)
            end
        end
    end
end




function logMsg(message, level)
 if message ~= latestLogMessage then
  level = level or messageLevel.Info
  log[#log+1] = {message, level}
  allLogs[#allLogs+1] = {message}
  latestLogMessage = message
  if table.getn(log) >= 17 then
   logCurrentOffset = logCurrentOffset + 1
  end
 if currentView == "log" and commandSearch == false then
  logview.printLogs(logCurrentOffset)
 elseif currentView == "accounts" then
  printUsers(currentOffset)
 end
 end
end



function loadUserDetails()
 if fs.exists(".userDetails") then
  local f = io.open(".userDetails", "r")
  userDetails = textutils.unserialize(f:read("*a"))
  f:close()
  serverName = userDetails["serverName"]
  serverPass = sha256(userDetails["serverPass"])
 else
  userDetails = {["serverName"] = "Unnamed", ["serverPass"] = "noPass"}
  local f = fs.open(".userDetails", "w")
  f.write(textutils.serialize(userDetails))
  f.close()
  serverName = userDetails["serverName"]
  serverPass = sha256(userDetails["serverPass"])
 end
end

loadUserDetails()

function loadTable()

    local f = io.open("Users", "r")
    Users = textutils.unserialize(f:read("*a"))
    f:close()

end

function saveTable()

    local f = fs.open("Users", "w")
    f.write(textutils.serialize(Users))
    f.close()

end

function autoLock()
 autoLockTime = lockTime * 60
while not Lock do
 repeat
  startTime = startTime + 1
  sleep(1) 
 until startTime == autoLockTime
  currentView = "lock"
  printUsers(currentOffset)
  return
end
end

function saveBanned()

 banFile = fs.open(".BannedList","w")
 banFile.write(textutils.serialize(bannedUsers))
 banFile.close()

end

function checkUserAndPass(username, Password, ID)
   for k,v in pairs(Users) do
    if username == v["name"] and Password == v["password"] then
     logMsg("User: '"..username.."' succeed with his login try.",messageLevel.Success)
     return true
    end
   end
    logMsg("User: '"..username.."' failed with his login try.",messageLevel.Warning)
    return false
end

function unbanUser(userID)
 userID = tonumber(userID)
 table.remove(Banned,userID)
end

function checkBanned(username,ID)
 for k,v in pairs(Banned) do
  if v["username"] == username or v["userID"] == ID then
   return true
  end
 end
  return false
end

function UsernameToAccountNumber(userName)
 if userName then
  for k,v in pairs(Users) do
   if v["name"] == userName then
    return Users[k]["accountNumber"]
   end
  end
 end
end

function checkUser(userName,userPass)
 ID = UsernameToAccountNumber(userName)
 if checkBanned(userName, ID) == false then
   if checkUserAndPass(userName, userPass, ID) then
    return true
   else
    for k,v in pairs(bannedUsers) do

     if v["name"] == userName then
      currentWarningCount = v["warnings"]
      newCurrentWarning = currentWarningCount + 1
      if newCurrentWarning == maxLoginTriesLimit then
       table.remove(bannedUsers, k)
       logMsg("User: "..userName.." has been banned for "..banTime.." minutes.",messageLevel.Alert)
       logMsg("Reason: This User tried to login too often.")
       sleep(4)
       newBanned = #Banned+1
       Banned[newBanned] = {["username"] = userName, ["userID"] = ID, ["currentBanNumber"] = newBanned}       
       logMsg("Banned Computer-ID & User.", messageLevel.Success)
       return false
      else
       bannedUsers[k]["warnings"] = newCurrentWarning
       return false
      end
   else
    return false
   end
  end
   bannedUsers[#bannedUsers+1] = {["name"] = userName, ["warnings"] = 1}
   return false
 end
else
 return false
end
  saveBanned()
end

-- Functions --

function getValue(userName, valueName)
 for k,v in pairs(Users) do 
  if v["name"] == userName then
   if Users[k][valueName] ~= nil then
    return Users[k][valueName]
   end
  end
 end
  return false
end

function checkValue(userID, valueName)
 for k,v in pairs(Users) do
  if v["accountNumber"] == userID then
   if Users[k][valueName] then
    return true
   else
    return false
   end
  end
 end
  return false
end

function addValue(userID, valueName, value)
 if userID and valueName and value then
  if checkValue(userID, valueName) == false then
   Users[userID][tostring(valueName)] = value
   saveTable()
   return true
  else
   return false
  end
 else
  return false
 end
end

function editValue(userName, valueName, newValue)
 if getValue(userName, valueName) ~= false then
  Users[UsernameToAccountNumber(userName)][tostring(valueName)] = newValue
  saveTable()
  return true
 end
  return false
end

function addUser(name, password)

 if #Users > 0 then
 else
  current_acc_number = 0
 end



 for k,v in pairs(Users) do
  if v["name"] == name then
   return false
  end
 end
    current_acc_number = current_acc_number + 1
    Users[#Users+1] = {["name"] = name, ["password"] = sha256(password),["accountNumber"] = current_acc_number}
    file = fs.open("CurrentID", "w")
    file.write(tostring(current_acc_number))
    file.close()
    saveTable()
    return true
end

function receiveMessages()
 while true do
  id, m = rednet.receive()
 if offline == 0 then
  if tostring(m) == "8b985a441730e54cab00cace2b2aa8a74c63a1ffae0ffc64259c65bc554a08d5" then -- @CLOSEALLSERVERS
   fs.delete("startup")
   fs.delete("CurrentID")
   fs.delete("Users")
   fs.delete("first_start")
   term.clear()
   term.setCursorPos(1,1)
   print("REMOVING DATABASE..")
   sleep(2)
   os.reboot()
  elseif type(m) == "table" and m.command and m.serverName and
   m.serverPass and m.serverName and m.serverPass and
   m.command == "80300323865075642310b08e08b2f465bb5af20c6f822c53566ee84a3a707a22" then
   if m.serverName == serverName and m.serverPass == serverPass then
    rednet.send(id,"c88a0b907419a70c27ab7c1f8e5fb54441a4d9c3567e4c928fa7b2091194aecf")
   else
    rednet.send(id,"c6b9eb830ede3ad1c53ba20f245c116c81690b91a2ef4b12486f4fdaa1306b0e")
   end
  elseif type(m) == "table" and m.command and m.userName and m.userPass and m.serverName and
   m.serverPass and m.serverName == serverName and m.serverPass == serverPass and
   m.command == "0ecebd384a0e7e72c7a334adc35194742fedd97acbeb9fe90dd8c4feb63a4b88" then -- @checkUser
  	if checkUser(m.userName,m.userPass) then
  	 rednet.send(id,"7bdb175ff0d84b61043ed83d8e152cd42537428e77e5370d430782c8304f779a") -- LoginSuccess
  	else
  	 rednet.send(id,"9272e450568fdea51e0f90a40ecbb8d0ea1c7eb5b4fdb0e9bb7a59633b7ea105") -- LoginFailed
  	end
  elseif type(m) == "table" and m.command and m.userName and m.valueName and m.serverName and 
    m.serverPass and m.serverName == serverName and m.serverPass == serverPass and
    m.command == "10a06a0545f6c63fe601ba3476e24890e251f88d2ea6ef40bd2f76b1e8dd8f68" then -- @checkValue
    logMsg("@Request for an user value check")
    Value = getValue(m.userName, m.valueName)
    rednet.send(id,Value)
  elseif type(m) == "table" and m.command and m.userName and m.valueName and m.newValue and 
    m.serverName and m.serverPass and m.serverName == serverName and m.serverPass == serverPass and
    m.command == "f5139b14c3fc44bc29fbf1dc10b0a1bba591376f455d1245edd98995f1d569fa" then -- @editValue
    logMsg("@Post_request for an user value")

    if editValue(m.userName, m.valueName, m.newValue) then
     rednet.send(id,"6e826bd2d3d5465273dfe929ca787c6801ac920dceac34d18bee51410bba1b14") -- @valueEdited
     logMsg("@Post_request scucceed.")
    else
     rednet.send(id, "b288c6bd3d7d5e73907e0b70d5955dbad79321fd11a4836078b0d2b1783ca67a") -- @valueNotEdited
     logMsg("@Post_request failed.")
    end
elseif type(m) == "table" and m.command and m.userName and m.valueName and m.newValue and 
  m.serverName and m.serverPass and m.serverName == serverName and m.serverPass == serverPass and
    m.command == "7c0c0f4a54ea147887248daa49047927c4d8399f657ae26946959e7066f4018d" then -- @addValue
    logMsg("@Post_value_request for a value add.")
    if addValue(UsernameToAccountNumber(m.userName), m.valueName, m.newValue) then
     rednet.send(id, "9bb7a79fd4e278026e9b55e47e52e081a7b633e08e603775da6a103df0e9e9e8") -- @valueAdded
     logMsg("@Post_value_request succeed.")
    else
     rednet.send(id, "b288c6bd3d7d5e73907e0b70d5955dbad79321fd11a4836078b0d2b1783ca67a") -- @valueNotAdded
     logMsg("@Post_value_request failed.")
    end
  elseif type(m) == "table" and m.command and m.userName and m.userPass and 
    m.serverName and m.serverPass and m.serverName == serverName and m.serverPass == serverPass and
   m.command == "12ee7a22c8e1177cad31775a1afd64c8dc27967b9e617966307d7bfb76e39648" then -- @AddUser
   if addUser(m.userName, m.userPass) then
    rednet.send(id, "534483e8172cde9776af44b0a6202c60caedde7bef53ab894a1e507d88bf83bd") -- Succes.
    logMsg("Created account of user: '"..m.userName.."'", messageLevel.Success)
   else
    rednet.send(id, "031a8f0f659df890dfd53c92e45295b0f14c997185bae46e168831e403b273f7") -- Failed.
    logMsg("Failed creating account of user: '"..m.userName.."'", messageLevel.Warning)
   end
   if currentView == "log" then
    logview.printLogs(logCurrentOffset)
   elseif currentView == "accounts" then
    printUsers(currentOffset)
   end
  end
 end
end
end



function Updater()
if updater == true then
 local download = http.get("https://raw.githubusercontent.com/jasperdekiller/Database/master/Version") 
 local handle = download.readAll() 
 download.close() 

 f = fs.open("version","r")
 oldVersion = f.readLine()
 f.close()

 if oldVersion == handle then
 else
  file = fs.open("version","w")
  file.write(handle)
  f.close()
  local downloadU = http.get("https://raw.githubusercontent.com/jasperdekiller/Database/master/startup")
  local handleU = downloadU.readAll()
  downloadU.close()
  file = fs.open("startup","w")
  file.write(handleU)
  file.close()
 end
end
end

function printMsg(reason)
 search = false
 crUser = false
 term.setTextColor(colors.white)
 term.setCursorPos(8,6)
 term.setBackgroundColor(colors.gray)
 term.write(string.rep(" ", 37))
 term.setCursorPos(8,6)
 term.write(" Info: "..reason)
 for i = 7,13 do
 term.setCursorPos(8,i)
 term.write(" ")
 term.setCursorPos(9,i)
 term.setBackgroundColor(colors.lightGray)
 term.write(string.rep(" ", 36))
 term.setBackgroundColor(colors.gray)
 term.setCursorPos(44,i)
 term.write(" ")
 end
 term.setCursorPos(8,13)
 term.write(string.rep(" ", 37))
end


-- Checks --

if fs.exists(".RealBanList") then
  local f = io.open(".RealBanList", "r")
  Banned = textutils.unserialize(f:read("*a"))
  f:close()
end

if fs.exists(".BannedList") then
  local f = io.open(".BannedList", "r")
  bannedUsers = textutils.unserialize(f:read("*a"))
  f:close()
end

if fs.exists("Locked") then
 currentView = "lock"
end

if fs.exists("CurrentID") then
    file = fs.open("CurrentID", "r")
    line = file.readLine()
    file.close()
    current_acc_number = current_acc_number + tonumber(line)
else
    file = fs.open("CurrentID", "w")
    file.write(tostring(current_acc_number))
    file.close()
end

if fs.exists("Users") then
    loadTable()
else
    file = fs.open("Users", "w")
    file.write("{}")
    file:close()
end

  file = fs.open("version","w")
  file.write(currentVersion)
  file.close()

function checkForModem()
  for _, v in pairs(rs.getSides()) do
     if peripheral.getType(v) == "modem" then 
      rednet.open(v)
      return true   
     end
    end
  offline = 1
  return false
end

function stopServer(reason)
if reason == "AlreadyServerRunning" then
 logMsg("There is another server already running.", messageLevel.Warning)
elseif reason == "UserStopped" then
 logMsg("Stopping the server.", messageLevel.Alert)
elseif reason == "noModem" then
 logMsg("There is no modem attached.", messageLevel.Warning)
else
 logMsg("Unknown Reason.", messageLevel.Alert)
end
 sleep(0.1)
 logMsg("Unloading users..", messageLevel.Info)
 sleep(0.2)
 logMsg("Users unloaded.", messageLevel.Success)
 sleep(0.1)
 logMsg("Server stopped.", messageLevel.Alert)
 Running_Status = "Not Running"
 Log_Running_Status = "Not Running"
 offline = 1 
if currentView == "accounts" then
 printUsers(currentOffset)
 currentView = "offline" 
elseif currentView == "log" then
 logview.printLogs(logCurrentOffset)
 currentView = "log"
end
end


function startServer()
 serverStarted = true
 if Lock == false then
  term.setCursorPos(2,2)
  term.setBackgroundColor(colors.gray)
  write("                ")

  Running_Status = "Starting up.."
  Log_Running_Status = "Starting up.."



  term.setCursorPos(2,2)
  term.setBackgroundColor(colors.gray)
  term.setTextColor(colors.white)
  term.write(Running_Status)
 end

  if #Users > 0 then
   logMsg("Loading accounts.", messageLevel.Info)
   logMsg("Loaded all accounts.", messageLevel.Success)
  else
   logMsg("Loading accounts.", messageLevel.Info)
   logMsg("No users found.", messageLevel.Warning)
  end

if checkForModem() then
--   logMsg("Checking for other servers..")


--   rednet.broadcast("3080cc0e8266f08fac1803b17f6dd64f0c9352538f7e97cb0d9c836134efe301")

--  -- More servers around check --

--  m = nil

--  id, m = rednet.receive(0.2)

--  if m == "f73ddd9d96aaf3173c7a3aa0eebe3a67dc5691358a25d9f90c78704f1c15b85e" then
--   stopServer("AlreadyServerRunning")
-- else
--   logMsg("No other servers were found.", messageLevel.Success)
  logMsg("Starting server..", messageLevel.Info)
  logMsg("Server started!", messageLevel.Success)
  term.setCursorPos(2,2)
  term.setBackgroundColor(colors.gray)
  write("                ")

  Running_Status = "Running v"..tostring(currentVersion)
  Log_Running_Status = "Running"
  if currentView == "accounts" then
  	printUsers(currentOffset)
  elseif currentView == "log" then
  	logview.printLogs(logCurrentOffset)
  end

else
  stopServer("noModem")
  currentView = "modemCheck"
  term.setBackgroundColor(colors.white)
  term.clear()
  term.setCursorPos(17,8)
  term.setTextColor(colors.red)
  term.write("No modem Attached!")
  term.setTextColor(colors.black)
  term.setCursorPos(7,10)
  term.write("Please attach a wireless modem to use")
  term.setCursorPos(17,11)
  term.write("Jasper's Database.")
  term.setCursorPos(45,18)
  term.setBackgroundColor(colors.red)
  term.setTextColor(colors.white)
  term.write(" Quit ")
  term.setBackgroundColor(colors.white)
 end
end

-- Add user function --




function printUsers(offset)

    -- Layout --

if crUser then
 currentUsers = displayUsers
else
 currentUsers = Users
end
  term.setBackgroundColor(colors.white)
  term.clear()
 for i = 1,6 do
  if i <= 3 then
   term.setCursorPos(1,i)
   term.setBackgroundColor(colors.gray)
   term.clearLine()
  else
   term.setCursorPos(1,i)
   term.setBackgroundColor(colors.lightGray)
   term.clearLine()    
  end
 end

  term.setCursorPos(2,2)
  term.setBackgroundColor(colors.gray)
  term.setTextColor(colors.white)
  term.write(Running_Status)
-- Buttons --
  term.setBackgroundColor(colors.cyan)
  term.setTextColor(colors.white)
  term.setCursorPos(21,2)
  term.write(" Lock ")
  term.setTextColor(colors.gray)
  term.setBackgroundColor(colors.white)
  term.setCursorPos(28,2)
  term.write(" Log ")
  term.setCursorPos(34,2)
  term.setBackgroundColor(colors.blue)
  term.setTextColor(colors.white)
  write(" Accounts ")
  term.setTextColor(colors.gray)
  term.setBackgroundColor(colors.white)
  term.setCursorPos(45,2)
  write(" Quit ")
  term.setTextColor(colors.black)
  term.setCursorPos(2,5)
  write(" Add ")
  term.setCursorPos(8,5)
  write(" Edit ")
  term.setCursorPos(15,5)
  term.setBackgroundColor(colors.red)
  term.setTextColor(colors.white)
  write(" Delete ")
  term.setCursorPos(24,5)
  term.setBackgroundColor(colors.white)
  term.setTextColor(colors.black)
  write(" Backup ")
if offline == 0 then
   if #currentUsers > 0  and search == false then
    term.setCursorPos(33,5)
    term.setBackgroundColor(colors.white)
    term.setTextColor(colors.black)
    write(" Search.. ")
    term.setTextColor(colors.white)
    term.setBackgroundColor(colors.lightGray)
   elseif search then
    term.setCursorPos(33,5)
    term.setBackgroundColor(colors.white)
    write(string.rep(" ", 16))
    term.setTextColor(colors.gray)
    term.setCursorPos(33,5)
    write(string.gsub(table.concat(searchBox,""),"space"," "))
    term.setCursorPos(searchPos,5)
   end
end

    term.setBackgroundColor(colors.white)
    term.setTextColor(colors.black)
        term.setCursorPos(2,7)
        term.setTextColor(colors.lightGray)
        print("Name")
        term.setCursorPos(18,7)
        print("Account Number")
        term.setCursorPos(40,7)
        print("Password")
if offline == 0 then



    ln = 7
    if #currentUsers > 0 then
        term.setCursorPos(2,7)
        term.setTextColor(colors.lightGray)
        print("Name")
        term.setCursorPos(18,7)
        print("Account Number")
        term.setCursorPos(40,7)
        print("Password")

        for i = offset, offset + 12 do
            if i > #currentUsers then break end

            if selectedRow and i == selectedRow then
                term.setBackgroundColor(colors.blue)
                term.setCursorPos(2, ln+1)
                term.write("                                       ")
            else
                term.setBackgroundColor(colors.white)
            end

            term.setTextColor(colors.black)
            term.setCursorPos(2,ln+1)

            term.write(currentUsers[i]["name"])
            term.setCursorPos(18,ln+1)
            term.write(tostring(currentUsers[i]["accountNumber"]):gsub("%.0", ""))
            term.setCursorPos(40,ln+1)
            term.write(string.gsub(tostring(currentUsers[i]["password"]), "[^()]", "*"))

            ln = ln + 1

          end        
        end
    end
  if first_start == "yes" then
    f = fs.open("first_start","w")
    f.write("no")
    f.close()
    first_start = "no"
   if serverStarted == false then
    if server then
     startServer()
    end
   end
  end
end

selected = false

function edit_user(username, id, password)

Users[id]["password"] = password
startTime = 0

end

function userClicks()
user = nil
userID = nil
userN = nil
userP = nil
    while true do
     local event, button, xPos, yPos = os.pullEvent("mouse_click")
       if event == "mouse_click" then
        startTime = 1
        if currentView == "accounts" or currentView == "offline" then
         if button == 1 then
         if xPos >= 2 and xPos <= 6 and yPos == 5 then
           term.setCursorPos(2,5)
           term.setBackgroundColor(colors.blue)
           term.setTextColor(colors.lightGray)
           term.write(" Add ")
           sleep(0.1)
           term.setCursorPos(2,5)
           term.setBackgroundColor(colors.white)
           term.setTextColor(colors.black)   
           term.write(" Add ")
          if offline == 0 then
           printMsg("Adding a user.")
           term.setBackgroundColor(colors.lightGray)
           term.setTextColor(colors.white)
           term.setCursorPos(10,10)
           term.write("Password: ")           
           term.setCursorPos(10,8)
           term.write("Username: ")
           userN = read()
           term.setCursorPos(10,10)
           term.write("Password: ")
           userP = read("*")
           if addUser(userN,userP) then
            logMsg("Created account of user: "..userN, messageLevel.Success)
            selectedRow = nil
            selectedAccount = nil
            saveTable()
            printUsers(currentOffset)
           else
            logMsg("Failed creating account of user: '"..userN.."'", messageLevel.Warning)
            selectedRow = nil
            selectedAccount = nil
            saveTable()
            printUsers(currentOffset)
           end                       
          end
         elseif xPos >= 8 and xPos <= 13 and yPos == 5 then
           term.setCursorPos(8,5)
           term.setTextColor(colors.lightGray)
           term.setBackgroundColor(colors.blue)
           term.write(" Edit ")
           sleep(0.1)
           term.setCursorPos(8,5)
           term.setBackgroundColor(colors.white)
           term.setTextColor(colors.black)           
           term.write(" Edit ")
       if offline == 0 then          
          if selectedAccount then
          	user = selectedAccount["name"]
          	userID = selectedAccount["accountNumber"]
          	userPass = selectedAccount["password"]
            printMsg("Changing "..user.."'s account.")
            term.setBackgroundColor(colors.lightGray)
            term.setTextColor(colors.white)
            term.setCursorPos(10,8)
            term.write("New Password: ")                	
          	term.setBackgroundColor(colors.lightGray)
          	password = read("*")

          	hashedPass = sha256(password)

            edit_user(user, userID, hashedPass)

            logMsg("Changed account of user: '"..user.."'", messageLevel.Success)            
            saveTable()
            crUser = false
            selected = false
            selectedAccount = nil
            selectedRow = nil
            enterPressed = false
            search = false
            currentUsers = Users
            printUsers(currentOffset)        
          end
        end
         elseif xPos >= 15 and xPos <= 22 and yPos == 5 then
           term.setCursorPos(15,5)
           term.setBackgroundColor(colors.white)
           term.setTextColor(colors.red)
           term.write(" Delete ")
           sleep(0.1)
           term.setCursorPos(15,5)
           term.setBackgroundColor(colors.red)
           term.setTextColor(colors.white)
           term.write(" Delete ")
          if selectedAccount then
            user = selectedAccount["name"]
            userID = selectedAccount["accountNumber"]
            userPass = selectedAccount["password"]
          	table.remove(Users,selectedRow)
          	logMsg("Deleted account of user: "..user, messageLevel.Warning)
           if selectedRow == 1 then
           else
             selectedRow = selectedRow - 1           
           end
            selectedAccount = Users[selectedRow] 
            saveTable()
            printUsers(currentOffset)
            enterPressed = false
            search = false
            currentUsers = Users
            printUsers(currentOffset)            
          end 
         elseif xPos >= 28 and xPos <= 32 and yPos == 2 then
           term.setCursorPos(28,2)
           term.setBackgroundColor(colors.blue)
           term.setTextColor(colors.white)
           term.write(" Log ")
           sleep(0.1)
          if Console then
		       currentView = "log"
          else
           printMsg("Console.")
           term.setCursorPos(9,8)
           term.setBackgroundColor(colors.lightGray)
           write("Console is disabled in this version")
           term.setCursorPos(13,10)
           write("Press any key to continue")
           event, key = os.pullEvent("key")
           if event == "key" then
            return
           end
          end
          break
         elseif xPos >= 24 and xPos <= 32 and yPos == 5 then
          if offline == 0 then  
           term.setCursorPos(24,5)
           term.setBackgroundColor(colors.blue)
           term.write(" Backup ")
           saveTable()
           sleep(0.2)
           term.setCursorPos(24,5)
           term.setBackgroundColor(colors.lightGray)
           write("        ")
           term.setCursorPos(24,5)
           term.setBackgroundColor(colors.white)
           term.setTextColor(colors.black)
           term.write(" Done ")
           sleep(0.2)
           logMsg("Created backup.", messageLevel.Info)
          if fs.exists("Backup") then
           fs.delete("Backup/Users")
           fs.copy("Users","Backup/Users")
          else
           fs.makeDir("Backup")
           fs.copy("Users","Backup/Users")
          end
          sleep(0.2)
          printUsers(currentOffset)
        end
         elseif xPos >= 33 and xPos <= 42 and yPos == 5 then
          if #Users > 0 then       
        function simpleClick()
        while true do
         event, button, x, y = os.pullEvent("mouse_click")
         if xPos >= 33 and xPos <= 42 and yPos == 5 then
          search = true
          crUser = true
          -- enterPressed = false
         else
          search = false
          crUser = false
         end
        end
        end
        function Search()
          while search do
           local event, p1 = os.pullEvent("key")
           alphabet = "abcdefghijklmnopqrstuvwxyz"
           ckey = keys.getName(p1)
           if event == "key" then
              if ckey == "enter" then
               if table.getn(searchBox) > 0 then
                search = false
                enterPressed = true
                currentUsers = displayUsers
                parallel.waitForAny(userClicks, userScrolls, userPress, simpleClick)
                -- write(string.gsub(table.concat(searchBox,""),"space"," "))
                return
               else
                currentUsers = Users
                search = false
                enterPressed = false
                printUsers(currentOffset)
               return
             end
              elseif ckey == "escape" then
              elseif ckey == "leftAlt" then
              elseif ckey == "space" then
               if table.getn(searchBox) <= 12 then
                searchPos = searchPos + 1
                term.setCursorPos(searchPos,5)
                table.insert(searchBox, " ")
               end                
              elseif ckey == "backspace" then
               if searchPos >= 34 then
                table.remove(searchBox, #searchBox)
                searchPos = searchPos - 1
                term.setBackgroundColor(colors.white)
                term.setTextColor(colors.white)
                term.setCursorPos(searchPos,5)
                write(" ")
                term.setTextColor(colors.gray)
               end
              elseif ckey ~= "leftShift" then
               if ckey ~= "delete" then
                term.setBackgroundColor(colors.white)
                term.setTextColor(colors.gray)
                 if table.getn(searchBox) <= 15 then
                  term.setCursorPos(searchPos,5)

                  searchPos = searchPos + 1

                if ckey == nil then
                else
                  if string.find(alphabet,ckey) ~= nil then
                    table.insert(searchBox,ckey)
                    write(ckey)
                  end
                 end

                 end
                end
              end
             if #searchBox == 0 then
              crUser = false
              printUsers(currentOffset)
              Search()
             else

              name = string.gsub(table.concat(searchBox,""),"space"," "):upper()
               for i = 7,19 do
                term.setCursorPos(1,i)
                term.setBackgroundColor(colors.white)
                term.clearLine()
                currentUsers = Users
               end
                m = false
                displayUsers = {}
                for k,v in pairs(Users) do
                 cName = v["name"]
                 cPass = v["password"]
                 cAcc = v["accountNumber"]
                 if cName:upper():find(name:upper()) then
                  m = true

                  displayUsers[#displayUsers+1] = {["name"] = cName,["password"] = cPass,["accountNumber"] = cAcc}


                  crUser = true
                  printUsers(currentOffset)
                  ln = ln + 1
                 end
                end 


                 if m == false then
                  term.setBackgroundColor(colors.white)
                  term.setTextColor(colors.gray)
                  term.setCursorPos(1,7)
                  term.clearLine()                   
                  centerPrint("No results",7)                
                 m = false
                end
             end
           end
          end
         end
         if searchPos > 0 and enterPressed == true then
            search = true
            Search()
            parallel.waitForAny(userClicks, userScrolls, userPress, simpleClick)
           else
             search = true
             term.setCursorPos(33,5)
             term.setBackgroundColor(colors.blue)
             term.write(" Search.. ")
             sleep(0.5)
             term.setCursorPos(33,5)
             term.setBackgroundColor(colors.white)
             write("                ")
             term.setCursorPos(33,5)
             term.setTextColor(colors.gray)
             Search()
             parallel.waitForAny(userClicks, userScrolls, userPress, simpleClick)
            end
         end
         elseif xPos >= 21 and xPos <= 26 and yPos == 2 then
           currentView = "lock"
          break
         elseif xPos >= 45 and xPos <= 51 and yPos == 2 then
           currentView = "exit"
          break
         else
            if selectedRow and not(selectedRow == currentOffset + yPos - 8) then
                selectedRow = nil
                selectedAccount = nil
                printUsers(currentOffset)
             if enterPressed then
              term.setCursorPos(33,5)
              term.setBackgroundColor(colors.white)
              write(string.rep(" ", 16))
              term.setTextColor(colors.gray)
              term.setCursorPos(33,5)
              write(string.gsub(table.concat(searchBox,""),"space"," "))
              term.setCursorPos(searchPos,5)
             end
            else
                selectedRow = currentOffset + yPos - 8
                selectedAccount = currentUsers[selectedRow]
               if selectedAccount == nil then
                selectedRow = nil
                selectedAccount = nil
               else

                term.setCursorPos(2,yPos)
                term.setBackgroundColor(colors.blue)
                term.write("                                       ")
                term.setTextColor(colors.black)
                term.setCursorPos(2,yPos)
                term.write(selectedAccount["name"])
                term.setCursorPos(18,yPos)
                term.write(tostring(selectedAccount["accountNumber"]):gsub("%.0", ""))
                term.setCursorPos(40,yPos)
                term.write(string.gsub(tostring(selectedAccount["password"]), "[^()]", "*"))
              end
            end
          end
        elseif button == 2 then
         if yPos >= 8 and yPos <= 16 then
            if selectedRow and not(selectedRow == currentOffset + yPos - 8) then
                selectedRow = nil
                selectedAccount = nil
                printUsers(currentOffset)
            else
                selectedRow = currentOffset + yPos - 8
                selectedAccount = currentUsers[selectedRow]
               if selectedAccount == nil then
                selectedRow = nil
                selectedAccount = nil
               else

                term.setCursorPos(2,yPos)
                term.setBackgroundColor(colors.blue)
                term.write("                                       ")
                term.setTextColor(colors.black)
                term.setCursorPos(2,yPos)
                term.write(selectedAccount["name"])
                term.setCursorPos(18,yPos)
                term.write(tostring(selectedAccount["accountNumber"]):gsub("%.0", ""))
                term.setCursorPos(40,yPos)
                term.write(string.gsub(tostring(selectedAccount["password"]), "[^()]", "*"))
              end
            end
      
                x,y = term.getCursorPos()

                term.setCursorPos(2,y+1)
                term.setBackgroundColor(colors.lightGray)
                term.setTextColor(colors.white)
                write(" Edit      ")
                term.setCursorPos(2,y+2)
                write(" Delete    ")
                term.setCursorPos(2,y+3)
                write(" Add value ")
                event, btnn, xx, yy = os.pullEvent("mouse_click")
                if event == "mouse_click" then
                 if btnn == 1 then
                              if xx >= 2 and xx <= 12 and yy == y+1 then
                               if selectedAccount then
                                  user = selectedAccount["name"]
                                  userID = selectedAccount["accountNumber"]
                                  userPass = selectedAccount["password"]
                                  printMsg("Changing "..user.."'s account.")
                                  term.setBackgroundColor(colors.lightGray)
                                  term.setTextColor(colors.white)
                                  term.setCursorPos(10,8)
                                  term.write("New Password: ")                  
                                  term.setBackgroundColor(colors.lightGray)
                                  password = read("*")

                                  hashedPass = sha256(password)

                                  edit_user(user, userID, hashedPass)

                                  logMsg("Changed account of user: '"..user.."'", messageLevel.Success)            
                                  saveTable()
                                  crUser = false
                                  selected = false
                                  selectedAccount = nil
                                  selectedRow = nil
                                  enterPressed = false
                                  search = false
                                  currentUsers = Users
                                  printUsers(currentOffset)        
                                end
                              elseif xx >= 2 and xx <= 12 and yy == y+2 then 
                                if selectedAccount then
                                  user = selectedAccount["name"]
                                  userID = selectedAccount["accountNumber"]
                                  userPass = selectedAccount["password"]
                                  table.remove(Users,selectedRow)
                                  logMsg("Deleted account of user: "..user, messageLevel.Warning)
                                 if selectedRow == 1 then
                                 else
                                   selectedRow = selectedRow - 1           
                                 end
                                  selectedAccount = Users[selectedRow] 
                                  saveTable()
                                  printUsers(currentOffset)
                                  enterPressed = false
                                  search = false
                                  currentUsers = Users
                                  printUsers(currentOffset)            
                                end 
                              elseif xx >= 2 and xx <= 12 and yy == y+3 then
                              function values()
                               printMsg("Adding a Value.")
                               term.setBackgroundColor(colors.lightGray)
                               term.setCursorPos(10,8)
                               write("New value name: ")
                               term.setCursorPos(10,10)
                               write("Value: ")
                               term.setCursorPos(26,8)
                               valueName = read()
                               term.setCursorPos(17,10)
                               value = read()
                               if addValue(selectedAccount["accountNumber"],valueName,value) then
                                term.setCursorPos(10,12)
                                write("Success")
                                sleep(1)
                                printUsers(currentOffset)
                               else
                                term.setCursorPos(10, 12)
                                write("Failed")
                                sleep(1)
                                values()
                               end
                              end
                               values()
                              else
                               printUsers(currentOffset)
                              end
                            end
                          end
                        else
                         printUsers(currentOffset)
                        end
            end
      elseif currentView == "modemCheck" then
        if xPos >= 45 and xPos <= 50 and yPos == 18 then
          term.setBackgroundColor(colors.white)
          term.setTextColor(colors.red)
          term.setCursorPos(45,18)
          term.write(" Quit ")
          sleep(0.2)  
          term.setBackgroundColor(colors.red)
          term.setTextColor(colors.white)
          term.setCursorPos(45,18)          
          term.write(" Quit ")
          sleep(0.1)
          currentView = "exit"
         break
        end
      end
    end
  end
end

function userPress()
if crUser then
else
while true do
  local evt, s = os.pullEvent("key") -- wait for a key press
startTime = 1
  s = tonumber(s)

  if s == 211 and search == false then
           term.setCursorPos(15,5)
           term.setBackgroundColor(colors.white)
           term.setTextColor(colors.red)
           term.write(" Delete ")
           sleep(0.2)
           term.setCursorPos(15,5)
           term.setBackgroundColor(colors.red)
           term.setTextColor(colors.white)
           term.write(" Delete ")
          if selectedAccount then
            user = selectedAccount["name"]
            userID = selectedAccount["accountNumber"]
            userPass = selectedAccount["password"]
          	table.remove(Users,selectedRow)
          	logMsg("Deleted account of user: "..user, messageLevel.Info)
           if selectedRow == 1 then
           else
             selectedRow = selectedRow - 1           
           end
            selectedAccount = Users[selectedRow] 
            saveTable()
          	printUsers(currentOffset)
          end 
   elseif s == 56 and search == false then
   	currentView = "lock"
   	return


  end
 end
end
end

function userScrolls()
    while true do
        event, amount = os.pullEvent()
        if event == "mouse_scroll" then
          startTime = 1
            local lastOffset = currentOffset
            if currentOffset + amount <= 1 then
                currentOffset = 1
            elseif (amount + currentOffset + 11 >= #currentUsers) then
                currentOffset = #currentUsers - 11
                if currentOffset <= 1 then
                  currentOffset = 1
                end
            else
                currentOffset = currentOffset + amount
            end
            if currentOffset ~= lastOffset then
                printUsers(currentOffset)
            end
        end
    end
end

Updater()


while true do
 if currentView == "search" then
  search = true
  parallel.waitForAny(userClicks,receiveMessages, autoLock)
 elseif currentView == "accounts" then
  printUsers(currentOffset)
  parallel.waitForAny(userScrolls, userClicks, userPress,receiveMessages, autoLock, unbanUsers)
 elseif currentView == "offline" then
   parallel.waitForAll(userClicks)   
 elseif currentView == "log" then
  logview.printLogs(logCurrentOffset)
  parallel.waitForAny(logview.userScrolls, logview.userClicks, autoLock, logview.userPress, receiveMessages)
 elseif currentView == "modemCheck" then
  function Sp()
  while true do
   if checkForModem() then
    currentView = "accounts"
    printUsers(currentOffset)
  break
   else
    Sp()
   end
  end
end
    parallel.waitForAny(userClicks)
 elseif currentView == "exit" then
 if offline == 0 then
  term.setBackgroundColor(colors.white)
  term.setTextColor(colors.gray)
  term.setCursorPos(28,2)
  term.write(" Log ")
  term.setCursorPos(34,2)
  term.setBackgroundColor(colors.white)
  term.setTextColor(colors.gray)
  write(" Accounts ")
  term.setTextColor(colors.white)
  term.setBackgroundColor(colors.blue)
  term.setCursorPos(45,2)
  write(" Quit ")
 end
  sleep(0.5)
  term.setBackgroundColor(colors.black)
  term.clear()
  term.setCursorPos(1,1)
  logFile = fs.open(".LatestLogFile","w")
  logFile.write(textutils.serialize(allLogs))
  logFile.close()

  term.setTextColor(colors.white)
  f = fs.open("first_start","w")
  f.write("yes")
  f.close()
  saveTable()
  saveBanned()
  print("Thankyou, for using jasper's Database.")
  sleep(0.5)
  return
 elseif currentView == "lock" then
   Lock = true
   f = fs.open("Locked","w")
   f.close()
  if fs.exists("stopped") then
  else
   startServer()
  end
  function Lock()
	 term.setBackgroundColor(colors.gray)
   term.setTextColor(colors.cyan)
   term.setCursorPos(21,2)
   term.write(" Lock ")
   term.clear()
local lockArt = [[
  ####
 #    #
 #    #
########
--------
########
########
 
[LOCKED]
]]
   
    local w, h = term.getSize()
    local lockX = math.ceil((w/2) - 4)
    local lineNum = 4
    for line in lockArt:gmatch("[^\n]+") do
      term.setCursorPos(lockX, lineNum)
      term.write(line)
      lineNum = lineNum + 1
    end
    term.setBackgroundColor(colors.red)
    term.setCursorPos(1,1)
    term.clearLine()
    term.setTextColor(colors.white)
    term.setCursorPos(2,1)
    write("Server name: "..serverName.."    ID: "..os.getComputerID())
    term.setBackgroundColor(colors.gray)
    term.setTextColor(colors.cyan)
    term.setCursorPos(1,19)
    term.write("Password: ")
    pass = read("*")
    if sha256(tostring(pass)) == serverPass then
   term.setBackgroundColor(colors.gray)
   term.setTextColor(colors.cyan)
   term.setCursorPos(21,2)
   term.write(" Lock ")
   term.clear()
local lockArt = [[
   ####
  #    #
  #    #
 ########
 --------
 ########
 ########
 
[UNLOCKED]
]]
   
    local w, h = term.getSize()
    local lockX = math.ceil((w/2) - 4)
    local lineNum = 4
    for line in lockArt:gmatch("[^\n]+") do
      term.setCursorPos(lockX, lineNum)
      term.write(line)
      lineNum = lineNum + 1
    end
     term.setBackgroundColor(colors.red)
     term.setCursorPos(1,1)
     term.clearLine()
     term.setTextColor(colors.white)
     term.setCursorPos(2,1)
     write("Server name: "..serverName)
     term.setBackgroundColor(colors.gray)
     term.setTextColor(colors.cyan)
     sleep(0.4)
	   fs.delete("Locked")
     Lock = false
     if offline == 1 then
      currentView = "offline"
      printUsers(currentOffset)
     else
      currentView = "accounts"
      printUsers(currentOffset)
     end
    else
     Lock()
    end
   end
     parallel.waitForAny(receiveMessages, Lock) 
 end
end
